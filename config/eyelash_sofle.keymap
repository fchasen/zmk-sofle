#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    thumb_mod_tap: thumb_mod_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "Thumb Mod Tap";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <200>;
        flavor = "balanced";
    };

    escape: escape {
        compatible = "zmk,behavior-tap-dance";
        label = "Escape";
        #binding-cells = <0>;
        bindings = <&mt GRAVE ESCAPE>, <&kp LC(C)>;
    };

    thumb_layer_tap: thumb_layer_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "Thumb layer tap";
        bindings = <&sl>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <200>;
        flavor = "balanced";
    };

    left_homerow: left_homerow {
        compatible = "zmk,behavior-hold-tap";
        label = "Left Homerow";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <200>;
        require-prior-idle-ms = <200>;
        flavor = "balanced";
        hold-trigger-key-positions = <7 8 9 10 11 12 25 24 23 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51>;
        hold-trigger-on-release;
    };

    right_homerow: right_homerow {
        compatible = "zmk,behavior-hold-tap";
        label = "Right Homerow";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <200>;
        require-prior-idle-ms = <200>;
        flavor = "balanced";
        hold-trigger-on-release;
        hold-trigger-key-positions = <0 1 2 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 3>;
    };

    tap_caps: tap_caps {
        compatible = "zmk,behavior-tap-dance";
        label = "Tap Caps";
        #binding-cells = <0>;
        bindings = <&sk LEFT_SHIFT>, <&caps_word>;
    };

    idle_modtap: idle_modtap {
        compatible = "zmk,behavior-hold-tap";
        label = "Idle Modtap";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <200>;
        require-prior-idle-ms = <200>;
        flavor = "tap-preferred";
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        doublefunc {
            bindings = <&tog 3>;
            key-positions = <55 61>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <57 59>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <11 12>;
        };

        uparrow {
            bindings = <&kp UP_ARROW>;
            key-positions = <62 63>;
        };

        leftarrow {
            bindings = <&kp LEFT>;
            key-positions = <62 61>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <39 40>;
        };

        alttab {
            bindings = <&kp RG(TAB)>;
            key-positions = <50 51>;
        };

        leftfunc {
            bindings = <&tog 3>;
            key-positions = <0 55>;
        };

        rightfunc {
            bindings = <&tog 3>;
            key-positions = <61 12>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&escape                      &mt EXCLAMATION N1               &mt AT N2                         &mt HASH N3                 &mt DOLLAR N4                &mt PERCENT N5                     &kp UP_ARROW     &mt CARET N6                      &mt AMPS N7                      &mt ASTERISK N8               &mt LEFT_PARENTHESIS N9        &mt RIGHT_PARENTHESIS N0            &kp BACKSPACE
&mt PLUS EQUAL               &kp Q                            &kp W                             &kp E                       &kp R                        &kp T                              &kp DOWN_ARROW   &kp Y                             &kp U                            &kp I                         &kp O                          &kp P                               &mt PIPE BACKSLASH
&mt UNDER MINUS              &kp A                            &kp S                             &left_homerow LEFT_SHIFT D  &left_homerow LEFT_GUI F     &kp G                              &kp LEFT_ARROW   &kp H                             &right_homerow RIGHT_GUI J       &right_homerow RIGHT_SHIFT K  &kp L                          &mt COLON SEMI                      &mt DOUBLE_QUOTES APOS
&mt LEFT_BRACE LEFT_BRACKET  &idle_modtap LG(Z) Z             &kp X                             &kp C                       &kp V                        &kp B                              &kp RIGHT_ARROW  &kp N                             &kp M                            &mt LEFT_BRACKET COMMA        &mt RIGHT_BRACKET DOT          &mt QUESTION FSLH                   &mt RIGHT_BRACE RIGHT_BRACKET
&kp C_MUTE                   &thumb_mod_tap LCTRL LEFT_ARROW  &thumb_mod_tap LEFT_ALT UP_ARROW  &sl 1                       &thumb_mod_tap LEFT_GUI TAB  &thumb_mod_tap LEFT_SHIFT SPACE    &kp ENTER        &thumb_mod_tap RIGHT_SHIFT SPACE  &thumb_mod_tap RIGHT_GUI RETURN  &sl 2                         &thumb_mod_tap RIGHT_ALT DOWN  &thumb_mod_tap RIGHT_CONTROL RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Base";
        };

        Nav {
            bindings = <
&trans      &kp F1  &kp F2     &kp F3     &kp F4     &kp F5      &kp K_VOLUME_DOWN  &kp F6     &kp F7      &kp F8              &kp F9              &kp F10         &trans
&trans      &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mkp MB4    &kp K_VOLUME_DOWN  &kp PG_UP  &kp HOME    &trans              &kp F11             &kp F12         &trans
&trans      &trans  &trans     &trans     &trans     &mkp MB5    &kp K_PREVIOUS     &kp PG_DN  &kp END     &kp LA(UP_ARROW)    &kp LA(LEFT_ARROW)  &kp UP_ARROW    &kp LA(RIGHT_ARROW)
&trans      &trans  &trans     &trans     &trans     &trans      &kp K_NEXT         &trans     &trans      &kp LA(DOWN_ARROW)  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT
&kp C_MUTE  &trans  &trans     &trans     &trans     &trans      &kp K_PLAY_PAUSE   &trans     &kp K_MUTE  &trans              &trans              &trans
            >;

            display-name = "Nav";
            sensor-bindings = <&scroll_encoder>;
        };

        Symbol {
            bindings = <
&kp GRAVE  &kp LS(EXCL)   &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans     &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)  &kp LS(RPAR)     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans     &kp LS(UNDER)  &kp LS(LT)    &kp LS(GT)     &kp LS(LBRC)  &kp LS(RBRC)     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans     &kp LS(PLUS)   &kp LS(PIPE)  &kp LS(DQT)    &kp LBKT      &kp RBKT         &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans         &trans        &trans         &trans        &trans           &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "Symbol";
        };

        Function {
            bindings = <
&studio_unlock  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F12  &rgb_ug RGB_COLOR_HSB(0,90,46)  &rgb_ug RGB_COLOR_HSB(36,83,61)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG
&trans          &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans   &trans                          &trans                           &trans                          &rgb_ug RGB_BRD  &trans
&trans          &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans   &trans                          &trans                           &trans                          &trans           &trans
&bootloader     &sys_reset    &trans          &trans        &trans        &trans          &mmv MOVE_RIGHT  &trans   &trans                          &sys_reset                       &soft_off                       &trans           &bootloader
&trans          &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans   &trans                          &trans                           &trans                          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "Func";
        };
    };
};
